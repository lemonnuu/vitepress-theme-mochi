import{_ as s,c as a,o as n,a as e}from"./app.62528036.js";const d=JSON.parse('{"title":"vitepress-theme-mochi","titleTemplate":false,"description":"","frontmatter":{"date":"2023-01-06 13:54:22","title":"vitepress-theme-mochi","titleTemplate":false,"outline":[2,4],"author":"Mochi","categories":["post"],"tags":["vitepress"]},"headers":[{"level":2,"title":"序章","slug":"序章","link":"#序章","children":[{"level":3,"title":"梦想开始的地方","slug":"梦想开始的地方","link":"#梦想开始的地方","children":[]},{"level":3,"title":"心路历程","slug":"心路历程","link":"#心路历程","children":[]},{"level":3,"title":"自己动手, 丰衣足食","slug":"自己动手-丰衣足食","link":"#自己动手-丰衣足食","children":[]}]},{"level":2,"title":"开发脉络","slug":"开发脉络","link":"#开发脉络","children":[{"level":3,"title":"样式","slug":"样式","link":"#样式","children":[]},{"level":3,"title":"数据","slug":"数据","link":"#数据","children":[]},{"level":3,"title":"组件","slug":"组件","link":"#组件","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"_POSTS/vitepress/002_vitepress-theme-mochi.md","lastUpdated":1672990613000}'),l={name:"_POSTS/vitepress/002_vitepress-theme-mochi.md"},p=e(`<h1 id="vitepress-theme-mochi" tabindex="-1">vitepress-theme-mochi <a class="header-anchor" href="#vitepress-theme-mochi" aria-hidden="true">#</a></h1><p>为自己量身打造一个 VitePress 主题。</p><h2 id="序章" tabindex="-1">序章 <a class="header-anchor" href="#序章" aria-hidden="true">#</a></h2><h3 id="梦想开始的地方" tabindex="-1">梦想开始的地方 <a class="header-anchor" href="#梦想开始的地方" aria-hidden="true">#</a></h3><p>相信很多人和我一样, 一直以来都想弄一个自己的专属博客。然后可以整理 note 亦或是随手记录一些 inspiration, 看见别人好看的博客总会眼馋😍。</p><p>在没有接触这方面的相关知识之前, 我认为这是一件很复杂的事情。就一直没有开搞, 咳咳, 也就拖了四五年吧...</p><blockquote><p>吐槽一句 : 以前的行动力可真弱, 说的现在就很强一样😅</p></blockquote><p>直到...我遇见了 <a href="https://v2.vuepress.vuejs.org/zh/" target="_blank" rel="noreferrer">VuePress</a>、<a href="https://vitepress.vuejs.org/" target="_blank" rel="noreferrer">VitePress</a>、<a href="https://hexo.bootcss.com/" target="_blank" rel="noreferrer">Hexo</a> 等框架。</p><h3 id="心路历程" tabindex="-1">心路历程 <a class="header-anchor" href="#心路历程" aria-hidden="true">#</a></h3><p>最开始我的博客是基于 VuePress 搭建的, 使用了 <a href="https://vuepress-theme-reco.recoluan.com/" target="_blank" rel="noreferrer">vuepress-reco</a> 主题, 这是一个非常优秀且好看的主题。</p><p>用了一段时间以后, 可能自身确实是带有点&quot;渣男体质&quot;🙃, 我又爱上了 VitePress 的毛玻璃。Emm, 然后怎么看自己的博客都有点不顺眼。</p><p>再接着, 我寻找了很多主题, 诸如 <a href="https://doc.xugaoyi.com/" target="_blank" rel="noreferrer">vuepress-theme-vdoing</a>、<a href="https://vuepress-theme-hope.github.io/" target="_blank" rel="noreferrer">vuepress-theme-hope</a> 等。它们都很强大, 功能齐全, 但是样式&quot;东叔&quot;有点不喜欢。</p><h3 id="自己动手-丰衣足食" tabindex="-1">自己动手, 丰衣足食 <a class="header-anchor" href="#自己动手-丰衣足食" aria-hidden="true">#</a></h3><p>没办法, 没找到现成的就只能自己动手, 就先基于 VitePress 仿着 vuepress-reco 试试看吧, 说干就干!</p><h2 id="开发脉络" tabindex="-1">开发脉络 <a class="header-anchor" href="#开发脉络" aria-hidden="true">#</a></h2><h3 id="样式" tabindex="-1">样式 <a class="header-anchor" href="#样式" aria-hidden="true">#</a></h3><p>首先摆在面前的就是样式问题, 由于还得兼容移动端和适配黑暗模式, 感觉靠自己写样式有点啰嗦, 就采用了 <a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">tailwindcss</a>。</p><blockquote><p>本来还想用偶像 <a href="https://github.com/antfu" target="_blank" rel="noreferrer">atufu</a> 的 <a href="https://github.com/unocss/unocss" target="_blank" rel="noreferrer">UnoCss</a>, 但是又不太熟, 想想还是蒜了...</p></blockquote><p>这里贴出 <code>tailwind.config.js</code> 的部分配置:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">type</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">import(&#39;tailwindcss&#39;).Config</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">darkMode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">class</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./docs/.vitepress/**/*.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./docs/**/*.{vue,md}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="意外之喜" tabindex="-1">意外之喜 <a class="header-anchor" href="#意外之喜" aria-hidden="true">#</a></h4><p>在没有使用 tailwindcss 前, 一直在苦恼个事儿。文本的高亮、字体颜色改变得自己写行内样式或是提前预设 CSS, 总感觉有点啰哩吧嗦的。</p><p>使用了 tailwindcss 后, 虽然要写的东西一点没变, 但是它提前预设了很多 CSS, GOOD! 可以写的非常爽了。</p><h3 id="数据" tabindex="-1">数据 <a class="header-anchor" href="#数据" aria-hidden="true">#</a></h3><p>解决了样式问题后, 有一个严峻的问题摆在眼前, 没有数据!!!</p><p>不同于 VuePress, VitePress 压根没有 pages 的数据, emm...</p><p>那就只能自己通过 Node 读取文件了, 再正则获取 frontmatter 并解析出来, 组装好存入 json 文件, 最后交由主题进行读取。</p><p>其中使用了两个库：<a href="https://www.npmjs.com/package/js-yaml" target="_blank" rel="noreferrer">js-yaml</a> 和 <a href="https://www.npmjs.com/package/fs-extra" target="_blank" rel="noreferrer">fs-extra</a>。</p><h3 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-hidden="true">#</a></h3><p>接下来的事情就是开发主题组件了, 这里不进行赘述, 但有几个好玩的东西。</p><h4 id="打字机" tabindex="-1">打字机 <a class="header-anchor" href="#打字机" aria-hidden="true">#</a></h4><p>在看一些文档时, 可能会发现打字机的特效, <a href="https://www.typeitjs.com/" target="_blank" rel="noreferrer">TypeIt</a> 可帮助我们简单的实现它, 诸如这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TypeIt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.multipleStrings</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">strings</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">This is a great string.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">But here is a better one.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">speed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">waitUntilVisible</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h4 id="梅花特效" tabindex="-1">梅花特效 <a class="header-anchor" href="#梅花特效" aria-hidden="true">#</a></h4><p>梅花特效是用 canvas 画出来的, 其实现原理就是在一条线的终点生成随机角度随机长度的左子树与右子树, 然后递归。</p><p>只不过要产生画的动画得用到 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noreferrer">requestAnimationFrame</a> 方法, 并且要广度优先的画, 利用函数堆栈即可。</p><p>下面是相关部分代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> pendingTasks </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">frame</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tasks</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">pendingTasks</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">pendingTasks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">tasks</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> frameCount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">startFrame</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">frameCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">frameCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">frame</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">startFrame</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><p>基本的实现思路就是这样, 但是还是有很多不足的地方：</p><ul><li>组件封装的不是很好</li><li>没有暴露一些配置</li></ul><p>但是转身一想, 反正是写给自己用的, 普适性就不要求那么高了, 应该也没其它人用, 顿时就舒坦多了😄</p><p>不过, 未来如果有可能, 未来如果有时间, 还会有未来的。</p>`,43),o=[p];function t(r,c,i,y,F,D){return n(),a("div",null,o)}const C=s(l,[["render",t]]);export{d as __pageData,C as default};
