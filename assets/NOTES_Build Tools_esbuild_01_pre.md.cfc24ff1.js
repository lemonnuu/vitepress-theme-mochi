import{_ as e,c as i,o as l,a as t}from"./app.62528036.js";const S=JSON.parse('{"title":"esbuild","titleTemplate":"前言","description":"","frontmatter":{"title":"esbuild","titleTemplate":"前言"},"headers":[],"relativePath":"_NOTES/Build Tools/esbuild/01_pre.md","lastUpdated":1672992558000}'),o={name:"_NOTES/Build Tools/esbuild/01_pre.md"},s=t('<h1 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-hidden="true">#</a></h1><p>Vite 在开发环境使用了 esbuild 构建『依赖』后, esbuild 逐渐进入我们的视野。最直观的感受就是非常 快！</p><blockquote><p>注意 Vite 只是使用 esbuild 构建依赖, 源码部分是采用原生 ES Module 方式提供源码, 相当于让浏览器接管了打包的部分任务。</p></blockquote><p>esbuild 是一个极速的 JavaScript 打包器, 和 Rollup 不同, 它是用 Go 语言编写的, 且并不能使用配置文件。它的使用可以通过命令行, 或者是在 JavaScript 中构建脚本, Vite 就是采取这种方式。</p><p>需要注意的是, Vite 在生产环境并没有使用 esbuild, 而是选择了 Rollup。因为目前来说针对构建应用的一些重要功能 esbuild 还在持续开发中, 比如 code spliting 和 CSS 处理方面(举个栗子：JS 里并不会包含插入 CSS 的逻辑, 构建完 CSS 还得手动插入)。</p><p>下面是 esbuild 的一些主要特性：</p><ul><li>极快的速度, 无需缓存</li><li>支持 ES6 和 CommonJS 模块</li><li>支持对 ES6 模块进行 tree shaking</li><li>API 可同时用于 JavaScript 和 Go</li><li>兼容 TypeScript 和 JSX 语法</li><li>支持 Source maps</li><li>支持 Minification</li><li>支持 plugins</li></ul><p>也就是说, esbuild 不支持转化为 ES5 和 UDM 规范。</p><p>还有一点要补充的是, esbuild 对 TypeScript 的构建并不会进行类型检查, 只是进行转译工作。如果需要进行类型检查单独运行 <code>tsc --noEmit</code> 即可。</p><blockquote><p>Vite 里就是使用 esbuild 转译 TypeScript, 对 TypeScript 不做类型检查的还有 Babel。</p></blockquote><hr><p>接下来, 就让我们一起来看看这个快到离谱的&quot;男人&quot;。notes 分为两个章节：</p><ul><li><a href="./02_use.html">快速上手</a>：esbuild 基本使用</li><li><a href="./03_faqs.html">常见问题</a>：关于 esbuild 的一些疑惑</li></ul><blockquote><p>注：wiki 并没有包含 esbuild 插件板块, 如果想写 Vite 插件的话, 研究一下还是很有必要的, 因为 Vite 插件需要兼容 esbuild 和 Rollup。</p></blockquote>',14),p=[s];function a(u,d,c,r,_,b){return l(),i("div",null,p)}const h=e(o,[["render",a]]);export{S as __pageData,h as default};
