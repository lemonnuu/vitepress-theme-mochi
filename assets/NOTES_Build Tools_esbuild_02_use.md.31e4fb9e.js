import{_ as s,c as a,o as e,a as n}from"./app.62528036.js";const A=JSON.parse('{"title":"esbuild","titleTemplate":"入门","description":"","frontmatter":{"title":"esbuild","titleTemplate":"入门","outline":[2,4]},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"命令行","slug":"命令行","link":"#命令行","children":[]},{"level":3,"title":"JavaScript API","slug":"javascript-api","link":"#javascript-api","children":[]}]}],"relativePath":"_NOTES/Build Tools/esbuild/02_use.md","lastUpdated":1672992558000}'),l={name:"_NOTES/Build Tools/esbuild/02_use.md"},p=n(`<h1 id="esbuild-入门" tabindex="-1">esbuild 入门 <a class="header-anchor" href="#esbuild-入门" aria-hidden="true">#</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><p>首先, 下载并本地安装 <a href="https://esbuild.docschina.org/" target="_blank" rel="noreferrer">esbuild</a>, 可以通过 npm a安装预编译的原生可执行文件：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">esbuild</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span>
<span class="line"></span></code></pre></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h2><p>esbuild 的使用方式只能通过命令行或者是用 JavaScript API 构建脚本, 没有配置文件一说。</p><h3 id="命令行" tabindex="-1">命令行 <a class="header-anchor" href="#命令行" aria-hidden="true">#</a></h3><p>运行 <code>npx esbuild -h</code> 查看可用的配置项与参数。</p><blockquote><p>毫无例外, esbuild 的可用选项和参数也很多哈...不过, 构建工具的理念都是相通的。</p></blockquote><p>下面是简化的版本：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Usage:</span></span>
<span class="line"><span style="color:#A6ACCD;">  esbuild [options] [entry points]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Simple options:</span></span>
<span class="line"><span style="color:#A6ACCD;">  --bundle              Bundle all dependencies into the output files</span></span>
<span class="line"><span style="color:#A6ACCD;">  --define:K=V          Substitute K with V while parsing</span></span>
<span class="line"><span style="color:#A6ACCD;">  --external:M          Exclude module M from the bundle (can use * wildcards)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --format=...          Output format (iife | cjs | esm, no default when not</span></span>
<span class="line"><span style="color:#A6ACCD;">                        bundling, otherwise default is iife when platform</span></span>
<span class="line"><span style="color:#A6ACCD;">                        is browser and cjs when platform is node)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --loader:X=L          Use loader L to load file extension X, where L is</span></span>
<span class="line"><span style="color:#A6ACCD;">                        one of: js | jsx | ts | tsx | css | json | text |</span></span>
<span class="line"><span style="color:#A6ACCD;">                        base64 | file | dataurl | binary | copy</span></span>
<span class="line"><span style="color:#A6ACCD;">  --minify              Minify the output (sets all --minify-* flags)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --outdir=...          The output directory (for multiple entry points)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --outfile=...         The output file (for one entry point)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --platform=...        Platform target (browser | node | neutral,</span></span>
<span class="line"><span style="color:#A6ACCD;">                        default browser)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --serve=...           Start a local HTTP server on this host:port for outputs</span></span>
<span class="line"><span style="color:#A6ACCD;">  --sourcemap           Emit a source map</span></span>
<span class="line"><span style="color:#A6ACCD;">  --splitting           Enable code splitting (currently only for esm)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --target=...          Environment target (e.g. es2017, chrome58, firefox57,</span></span>
<span class="line"><span style="color:#A6ACCD;">                        safari11, edge16, node10, ie9, opera45, default esnext)</span></span>
<span class="line"><span style="color:#A6ACCD;">  --watch               Watch mode: rebuild on file system changes</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Advanced options:</span></span>
<span class="line"><span style="color:#A6ACCD;">  --version                 Print the current version (0.16.4) and exit</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>esbuild 的使用不像 Rollup 和 Webapck 一样需要安装各式各样的插件亦或是 loader, 它基本上都内置好了。</p><h5 id="build" tabindex="-1">--build <a class="header-anchor" href="#build" aria-hidden="true">#</a></h5><p><code>--build</code> 参数有点像 Rollup 的 @rollup/plugin-node-resolve 和 @rollup/plugin-commonjs 插件的结合版。</p><p>它会将所有的依赖打包入 bundle 中。</p><h5 id="define-k-v" tabindex="-1">--define:K=V <a class="header-anchor" href="#define-k-v" aria-hidden="true">#</a></h5><p><code>--define:K=V</code> 参数的作用和 Rollup 的 @rollip/plugin-replace 插件作用相同, 用于替换文件中目标字符串。</p><h5 id="external-m" tabindex="-1">--external:M <a class="header-anchor" href="#external-m" aria-hidden="true">#</a></h5><p><code>--external:M</code> 参数就基本和 Rollup 的 external 选项作用一致了, 剔除的依赖包将成为 bundle 的前置依赖。</p><h5 id="format" tabindex="-1">--format=... <a class="header-anchor" href="#format" aria-hidden="true">#</a></h5><p><code>--format=...</code> 参数和 Rollup 的 format 选项略微有点差异, esbuild 不支持构建 UMD 格式的 bundle。</p><p>且它没有统一的默认的配置, 但可以取决于 <code>--platform=... </code> 参数的实现, 下面是对应关系：</p><ul><li><code>--paltfrom=browser</code> -&gt; iife</li><li><code>--paltfrom=node</code> -&gt; cjs</li></ul><h5 id="loader-x-l" tabindex="-1">--loader:X=L <a class="header-anchor" href="#loader-x-l" aria-hidden="true">#</a></h5><p><code>--loader:X=L</code> 参数就和 webpack loader 的概念很类似了, 用于处理不同类型的文件以及控制表现形式。</p><h5 id="minify" tabindex="-1">--minify <a class="header-anchor" href="#minify" aria-hidden="true">#</a></h5><p><code>--minify</code> 参数作用相当于启用 terser 压缩代码。</p><h5 id="outdir" tabindex="-1">--outdir=... <a class="header-anchor" href="#outdir" aria-hidden="true">#</a></h5><p><code>--outdir=...</code> 参数用于设置 bundle 的输出文件夹, 和 Rollup 的 output.dir 选项作用一致。</p><h5 id="outfile" tabindex="-1">--outfile=... <a class="header-anchor" href="#outfile" aria-hidden="true">#</a></h5><p><code>--outfile=...</code> 参数用于设置 bundle 的输出文件, 和 Rollup 的 output.file 选项作用一致。</p><h5 id="platform" tabindex="-1">--platform=... <a class="header-anchor" href="#platform" aria-hidden="true">#</a></h5><p><code>--platform=...</code> 参数用于指定构建 bundle 的运行平台, esbuild 可根据它调整默认的 format。</p><h5 id="sourcemap" tabindex="-1">--sourcemap <a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a></h5><p><code>--sourcemap</code> 选项指定是否开启 source map 功能。</p><h5 id="target" tabindex="-1">--target=... <a class="header-anchor" href="#target" aria-hidden="true">#</a></h5><p><code>--target=...</code> 选项用于指定 bundle 的 JavaScript 版本, 默认是 esnext。</p><p>需要注意的是, esbuild 不支持构建 ES5 的 bundle, 且不管选择哪个版本, 都是使用 <code>var</code> 定义变量。</p><h5 id="简单的示例" tabindex="-1">简单的示例 <a class="header-anchor" href="#简单的示例" aria-hidden="true">#</a></h5><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">esbuild</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.jsx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--bundle</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--minify</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--sourcemap</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--target=chrome58,firefox57</span></span>
<span class="line"></span></code></pre></div><h3 id="javascript-api" tabindex="-1">JavaScript API <a class="header-anchor" href="#javascript-api" aria-hidden="true">#</a></h3><p>有三种方式可用调用 esbuild 的 JavaScript API：</p><ul><li>命令行中调用</li><li>Go 中调用</li><li>JavaScript 中调用</li></ul><p>这里只讲解在 JavaScript 中调用的方式。</p><blockquote><p>其实消化了命令行调用 esbuild 后这个很容易理解。</p></blockquote><p>这是一个示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">esbuild</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entryPoints</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app.jsx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">bundle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">outfile</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">out.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span></code></pre></div><p><code>build</code> 函数会在子进程中运行 esbuild 的可执行文件, 并返回一个 Promise, 当构建完成后, 该 Promise 将被 resolve。</p><p>可以看到上述代码并未打印捕获的异常, 因为异常中的任何错误信息默认会被打印到控制台(可以修改 日志级别 按需关闭此功能)。</p><p>尽管还有个 <code>buildSync</code> 同步 API, 但是异步 API 对于构建脚本来说明显更为合适, 且插件只与异步 API 协同工作。</p><blockquote><p>这里就不展开说了, 如有需要可翻看<a href="https://esbuild.docschina.org/api/" target="_blank" rel="noreferrer">官网的 JavaScript</a> 章节。</p></blockquote>`,51),o=[p];function t(r,i,c,d,u,h){return e(),a("div",null,o)}const y=s(l,[["render",t]]);export{A as __pageData,y as default};
